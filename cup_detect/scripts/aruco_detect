#!/usr/bin/env python
import cv2
import numpy as np
import rospy
from tf import transformations
from cv_bridge import CvBridge, CvBridgeError
from sensor_msgs.msg import Image
from geometry_msgs.msg import Pose

class ArucoDetect:
  def __init__(self):

    #create cv bridge instance
    self.cvBridge = CvBridge()

    #create  camera_subscriber
    self.image_sub = rospy.Subscriber('/usb_cam/image_raw', Image, self.image_callback)
    
    #create pose pub
    self.cup_pose_pub = rospy.Publisher('pose_data', Pose, queue_size=1)
    #load aruco marker dictionary
    self.aruco_dict = cv2.aruco.Dictionary_get(cv2.aruco.DICT_6X6_250)

    #create aruco params
    self.aruco_param = cv2.aruco.DetectorParameters_create()
    self.cam_matrix = np.array([[ 336.55058091,    0.,          357.41330531],[   0.,          376.22034138,  196.27284712],[   0.,            0.,            1.,        ]])
    self.dist = np.array([[ 0.00571029,  0.00358575,  0.02551633, -0.01860799, -0.00833316]])


  def image_callback(self, msg):
    # convert image to cv
    try:
      cv_image = self.cvBridge.imgmsg_to_cv2(msg)
    except CvBridgeError:
      print('fail to convert to cv2 image')


    # convert image to graysecale
    gs_image = cv2.cvtColor(cv_image, cv2.COLOR_BGR2GRAY)
    
    # detect markers in vision
    bounding_boxes, ids, rejected_markers = cv2.aruco.detectMarkers(gs_image, self.aruco_dict, parameters=self.aruco_param)

    #TODO format bounding boxes so only cup and robot are detected
    
    if ids is not None:
      cv2.aruco.drawDetectedMarkers(gs_image,bounding_boxes)
      cv2.imshow("image",gs_image)
      cv2.waitKey(1)

      [rvecs, tvecs] = cv2.aruco.estimatePoseSingleMarkers(bounding_boxes, 6, self.cam_matrix, self.dist)

      #TODO get relative pose from robot to cup

      #TODO check that rotation and translation values are being set to correct axis
      #get relative pose of robot base to cup
      quaternion = transformations.quaternion_from_euler(rvecs[0][0][0], rvecs[0][0][1], rvecs[0][0][2])
      pose_msg = Pose()
      pose_msg.orientation.x = quaternion[0]
      pose_msg.orientation.y = quaternion[1]
      pose_msg.orientation.z = quaternion[2]
      pose_msg.orientation.w = quaternion[3]
      pose_msg.position.x = tvecs[0][0][0]
      pose_msg.position.y = tvecs[0][0][1]
      pose_msg.position.z = tvecs[0][0]`[2]
      #publish cup pose
      self.cup_pose_pub.publish(pose_msg)


if __name__ == '__main__':
  rospy.init_node('cup_detector')
  cupDetector = ArucoDetect()

  while not rospy.is_shutdown():
    rospy.spin()

